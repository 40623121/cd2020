var tipuesearch = {"pages": [{'title': '40623121 個人資料', 'text': '蔡朝旭 四設計三甲 \n 協同產品設計 Group 3 \n 小組成員 \n 40623114\xa0 github \xa0 | \xa0 CMSiMDE 40623121\xa0 github\xa0 | \xa0 CMSiMDE 40723203\xa0 github \xa0 | \xa0 CMSiMDE 40723205\xa0 github \xa0 | \xa0 CMSiMDE 40723207\xa0 github \xa0 | \xa0 CMSiMDE 40723209\xa0 github \xa0 | \xa0 CMSiMDE 40723218\xa0 github \xa0 | \xa0 CMSiMDE 40723219\xa0 github \xa0 | \xa0 CMSiMDE 40723227\xa0 github \xa0 | \xa0 CMSiMDE \xa0 \xa0(group leader) 40723233\xa0 github \xa0 | \xa0 CMSiMDE 40723239\xa0 github \xa0 | \xa0 CMSiMDE 40723247\xa0 github \xa0 | \xa0 CMSiMDE 40739214\xa0 github \xa0 | \xa0 CMSiMDE \n \n', 'tags': '', 'url': '40623121 個人資料.html'}, {'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '課程內容', 'text': '', 'tags': '', 'url': '課程內容.html'}, {'title': 'W1-W5', 'text': 'Week1 \n 建立個人倉儲cd2020及進行網站編譯 \n 1.下載 2019Fall可攜套件.7z \xa0 ，完成後開啟。 2.登入個人github帳號，創建新的倉儲cd2020。 3.進入要存放資料夾tmp。 4.輸入 git clone\xa0 5.輸入git submodule add\xa0 6.將up_dir的所有項目複 製到cd2020 。 7.完成後，python wsgi.py 開始編輯倉儲(login密碼為 admin )。 8.編輯完成後，git status \xa0 > \xa0 git add . \xa0 > \xa0 git commit -m  > \xa0 git push \n \n Week2 \n 登入個人的github， fork 老師的倉儲 。 \n 重建一個個人python系統 \n 進入 Python 官網下載 \n 下載SciTE系統 \n 建立新的start.bat及stop.bat \n 第三組第一次直播會議 \n 開會紀錄PDF: \n https://drive.google.com/openid=1R3UElFfUhid4D7hocedXO69w5lPEYi1M \n \xa0 \n Week3 \n \n 隨機分組 \n \n (1)random.shuffle的語法 \n random.shuffle（ x ，随機）使用方法 \n 2.抽點名 \n \n Week4 \n 第三組第一次直播會議 \n \n 翻譯作業:  https://drive.google.com/file/d/1TNFDnGNdFI9zS6bf-H6NFntmHbcFGGok/view?usp=sharing \n \n Week 5 \n 清明節放假 \n \n \n', 'tags': '', 'url': 'W1-W5.html'}, {'title': 'W6-W9', 'text': 'Week6 \n 第三組第二次直播會議 \n \n 作業二: \n \n 根據主題 0 和主題 1 的素材，您能否具體描述機械設計團隊為了完成作業 1 的四輪機器人需要做些什麼 ? \n 您需要從 https://cyberbotics.com/doc/guide/index 了解什麼來實現四輪機器人？ \n \n \xa0 \n \n Week 8 \n \n V-rep更新版本 \n 1.進入CoppliaSim 官方網站: https://www.coppeliarobotics.com/ \n 2.進入download 中下載教育版 \n 3.下載 CoppeliaSim Edu Binaries 可攜版本 \n 4.完成上述步驟即可刪除原本的V rep. \n \n Week9 \n \n 期中考線上課程 \n 1.藉由行事曆 建立 Google Handout Meet\xa0 \n 2.開放live至少10分鐘，進行個人操作，且錄製。 \n 3.將錄製檔存於個人 Google Drive 中的期中簡報 mp4 影片，並共享給@gm之所有用戶 \n \n', 'tags': '', 'url': 'W6-W9.html'}, {'title': 'W10-W14', 'text': '\n Week 10 \n 第三組第三次直播會議 \n \n \n 開會紀錄PDF連結: \n https://drive.google.com/file/d/1AP49O_JYqgqQNDzEz7Pxj-tzjugL8Bb2/view \n \n 作業三: 根據對 Topic2 和 Topic3 的閱讀，使用 CoppeliaSim 、 Webots 、 Onshape 提出一個機電一體化項目。 \n \n Week 11 \n ssh to\xa0 github \n \n \n 將SSH密鑰複製到剪貼板。 \n 如果您的SSH密鑰文件的名稱與示例代碼的名稱不同，請修改文件名以匹配當前設置。複製密鑰時，請勿添加任何換行符或空格。 \n $ clip < ~/.ssh/id_rsa.pub \n# Copies the contents of the id_rsa.pub file to your clipboard \n \n \n \xa02.在任何頁面的右上角，點擊您的個人資料照片，然後點擊 設置 。 \n \xa03.在用戶設置邊欄中，點擊 SSH和GPG密鑰 。 \n \xa04.單擊“\xa0 新建SSH密鑰” 或“ \xa0 添加SSH密鑰” 。 \n \xa05. 在“標題”字段中，為新密鑰添加一個描述性標籤。例如，如果您使用的是個人Mac，\xa0 \xa0則可以將此鍵稱為“個人MacBook Air”。 \n \xa06.將您的密鑰粘貼到“密鑰”字段中。 \n \xa07.單擊 添加SSH密鑰 。 \n \xa08.如果出現提示，請確認GitHub Enterprise密碼。 \n \n Week 12 \n \n IPV4 Ubuntu 對外連線 \n 新增整體系統阜號，主機網路為NAT Network。 \n 按下啟動，密碼 kmol2020，開啟 LXTermmial。 \n 輸入ifconfig -> sudo apt install net-tools，密碼 kmol2020。 \n 輸入ping 127.0.0.1測試，然後進入cd2020pj1->git pull。 \n 輸入sudo vi wsgi.py編輯內容，按 i 編輯，近端的host 改為10.0.2.4。 \n 按下esc後，輸入"wq" 儲存，開啟cd2020pj1.leo，在nav中搜尋"allowExt"。 \n 新增 ttt檔，然後在tmp下sudo vi oauth_scrum.txt中輸入內容 \n 輸入python3 wsgi.py 去啟動遠端。 \n 前往網站https:/127.0.0.0.1.1.8443/alogin。 \n Week 13 \n IPv4 遠端控制設定 \n 操作步驟: 1.在搜尋輸入cmd開啟命令窗。 2.輸入ipconfig來查看IPv4的IP。 3.將虛擬主機的整體系統埠號中的主機IP改為個人IPv4的IP。 4.啟動Ubuntu並開啟XLaunch.exe。 5.另一台主機開啟putty，並輸入遠端連線的IP。 6.設定SSH下的X11，將Enable X11 fowarding打勾並在X display location中輸入localhost:0.0。 7.存儲後再啟動即可連線到該主機，帳號及密碼輸入kmol2020。 8.輸入xterm&，並進入cd2020pj1。 9.git pull檢查版本，在進入docs及cmsimde。 10.輸入vi wsgi.py編輯(按i編輯)。 11.將近端的host改為10.0.2.4。 12.按Esc並輸入:wq存儲。 13.輸入python3 wsgi.py，網址為該主機IP加上17443(https://主機IP:17443)。 14.完成。 \n \n IPv6 遠端控制設定 \n \n 操作步驟: \n 1.從老師倉儲下的downloads打開w13_ipv6_assignment.txt，內有ipv6遠端控制說明。 2.依照說明設定，設定IPv6網路。 3.點選IPv6內容，IPv6位址輸入2001:288:6004:17:2020:1::7121 4.子網路首碼長度輸入64、預設匝道輸入2001:288:6006:17::254。 5.接著開啟虛擬主機，設定整體系統埠號，將主機IP改為個人IP。 6.啟動Ubuntu輸入密碼kmol2020。 7.開啟LXTermial，並進入cd2020pj1。 8.git pull檢查有無新版本，cd docs/cmsimde。 9.輸入vi wsgi.py，將host改為個人主機IP(按i編輯，按Esc輸入:wq存儲)。 10.在另一台主機開啟putty，輸入預連線主機IP。 11.設定SSH下的X11(Enable X11 fowarding打勾並在X display location中輸入localhost:0.0)。 12.設定完成後存儲，在打開即可連線該主機。 13.輸入帳密kmol2020，打開XLaunch.exe並輸入xterm&啟動。 14.進入tmp/cd2020pj1/docs/cmsimde，輸入python3 wsgi.py開啟遠端。 15.網址為[該主機IP]:17443(必須關閉proxy)。 16.即完成遠端控制操作。 \n \n \n \n', 'tags': '', 'url': 'W10-W14.html'}, {'title': 'W15-W18', 'text': '\n Week18 \n 1.FINAL Project \n 2.reveal \n 3.期末報告影片 \n \xa0 \n \n \n \n \n', 'tags': '', 'url': 'W15-W18.html'}]};